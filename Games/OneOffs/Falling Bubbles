<html><head><base href="https://graeycowl.github.io/">
<title>Falling Bubbles</title>
<style>
body {
  margin: 0;
  padding: 0;
  background-color: #000;
  color: #fff;
  font-family: Arial, sans-serif;
  overflow: hidden;
}
#game-canvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
#hud {
  position: absolute;
  top: 10px;
  left: 10px;
  font-size: 14px;
}
#controls {
  position: absolute;
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
}
.button {
  display: inline-block;
  margin: 0 10px;
  padding: 10px 20px;
  background-color: rgba(255,255,255,0.2);
  border: 1px solid #fff;
  border-radius: 5px;
  color: #fff;
  text-decoration: none;
  transition: background-color 0.3s;
}
.button:hover {
  background-color: rgba(255,255,255,0.4);
}
</style>
</head>
<body>
<canvas id="game-canvas"></canvas>
<div id="hud">
  <div>Level: <span id="level">1</span></div>
  <div>Score: <span id="score">0</span></div>
  <div>Bubble Size: <span id="size">Small</span></div>
</div>
<div id="controls">
  <a href="#" class="button" onclick="upgradeTank()">Upgrade Tank</a>
  <a href="#" class="button" onclick="showMap()">Show Map</a>
  <a href="https://graeycowl.github.io/" class="button">Forums</a>
</div>

<script>
const canvas = document.getElementById('game-canvas');
const ctx = canvas.getContext('2d');
const levelEl = document.getElementById('level');
const scoreEl = document.getElementById('score');
const sizeEl = document.getElementById('size');

let bubbles = [];
let playerX = window.innerWidth / 2;
let playerY = window.innerHeight / 2;
let playerSize = 20;
let level = 1;
let score = 0;

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}

function createBubble() {
  return {
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    size: Math.random() * 10 + 5,
    speed: Math.random() * 2 + 1,
    color: `hsl(${Math.random() * 360}, 50%, 50%)`
  };
}

function drawBubble(bubble) {
  ctx.beginPath();
  ctx.arc(bubble.x, bubble.y, bubble.size, 0, Math.PI * 2);
  ctx.fillStyle = bubble.color;
  ctx.globalAlpha = 0.7;
  ctx.fill();
  ctx.globalAlpha = 1;
  ctx.strokeStyle = '#fff';
  ctx.stroke();
}

function drawPlayer() {
  ctx.beginPath();
  ctx.arc(playerX, playerY, playerSize, 0, Math.PI * 2);
  ctx.fillStyle = '#4CAF50';
  ctx.fill();
  ctx.strokeStyle = '#fff';
  ctx.lineWidth = 2;
  ctx.stroke();
}

function moveBubbles() {
  bubbles.forEach(bubble => {
    bubble.y += bubble.speed;
    if (bubble.y > canvas.height + bubble.size) {
      bubble.y = -bubble.size;
      bubble.x = Math.random() * canvas.width;
    }
  });
}

function checkCollisions() {
  bubbles.forEach(bubble => {
    const dx = playerX - bubble.x;
    const dy = playerY - bubble.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    if (distance < playerSize + bubble.size) {
      score += Math.floor(bubble.size);
      playerSize += 0.1;
      bubble.y = -bubble.size;
      bubble.x = Math.random() * canvas.width;
      updateHUD();
    }
  });
}

function updateHUD() {
  scoreEl.textContent = score;
  levelEl.textContent = level;
  if (playerSize < 30) sizeEl.textContent = 'Small';
  else if (playerSize < 50) sizeEl.textContent = 'Medium';
  else sizeEl.textContent = 'Large';
}

function gameLoop() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  moveBubbles();
  checkCollisions();
  bubbles.forEach(drawBubble);
  drawPlayer();
  requestAnimationFrame(gameLoop);
}

function init() {
  resizeCanvas();
  for (let i = 0; i < 50; i++) {
    bubbles.push(createBubble());
  }
  gameLoop();
}

window.addEventListener('resize', resizeCanvas);
window.addEventListener('mousemove', (e) => {
  playerX = e.clientX;
  playerY = e.clientY;
});

function upgradeTank() {
  if (score >= 100 * level) {
    level++;
    score -= 100 * (level - 1);
    playerSize += 5;
    updateHUD();
    alert(`Congratulations! You've upgraded to level ${level}!`);
  } else {
    alert(`You need ${100 * level - score} more points to upgrade!`);
  }
}

function showMap() {
  alert("Map feature coming soon in the next update!");
}

init();
</script>
</body></html>